# Create flow chart
# Release version can be empty.
# If empty, 
# Give Betelabs
# send contributor role
# get flow chart

name: Deploy Docker

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: false
        description: Version
      create_release:
        type: boolean
        required: false
        description: Create github release
      release_description:
        type: string
        required: false
        description: Github release description
        default: Release related info       
      docker_tag:
        type: string
        required: false
        description: Docker tag

jobs:
  docker-workflow:
    permissions: write-all
    runs-on: ubuntu-latest
    name: Deploy Docker
    continue-on-error: false
    env:
      DOCKER_REGISTRTY: ${{ secrets.DOCKER_REGISTRTY }}
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: main

      - name: Extract owner
        shell: bash
        run: echo "##[set-output name=owner;]$(echo ${GITHUB_REPOSITORY%/*})"
        id: extract_owner

      - name: Checkout config repo
        uses: actions/checkout@v3
        with:
          repository: ${{ steps.extract_owner.outputs.owner }}/docker-workflow-config
          ref: main
          token: ${{ secrets.GH_PAT }}
          path: docker-workflow-config

      - name: Populate version to check
        env:
          INPUT_VERSION: ${{ inputs.version }}
        run: |
          version_to_check=''
          if [ "$INPUT_VERSION" == '' ]; then
              version_to_check="EMPTY_VERSION"
          else
              version_to_check="$INPUT_VERSION"
          fi
          echo "VERSION_TO_CHECK=$version_to_check" >> $GITHUB_ENV

      - name : Get Release
        uses: cardinalby/git-get-release-action@v1
        id: get-release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag: ${{ env.VERSION_TO_CHECK }}
          doNotFailIfNotFound : true

      - id: next_version
        if: ${{ inputs.create_release && steps.get-release.outputs.tag_name == '' }}
        uses: zwaldowski/semver-release-action@v3
        with:
          dry_run: true
          bump: patch
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release 
        if: ${{ inputs.create_release && steps.get-release.outputs.tag_name == '' }}
        id: create_release
        uses: actions/create-release@v1 # find alternate action as it is deprecated
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:  ${{ steps.next_version.outputs.version }}
          release_name: Release  ${{ steps.next_version.outputs.version }}
          body: |
            Release created by GitHub Action.
            ${{ inputs.release_description }}
          draft: false
          prerelease: false

      - name: Populate tags
        env:
          INPUT_VERSION: ${{ inputs.version }}
          CREATE_RELEASE: ${{ inputs.create_release }}
          SEM_VERSION: ${{ steps.next_version.outputs.version }}
          FETCHED_RELEASE: ${{ steps.get-release.outputs.tag_name }}
          RELEASE_TAG: ${{ inputs.docker_tag }}
        run: |
          tags=''
          deploy_version=''
          if [ "$CREATE_RELEASE" == 'true' ]; then
              if [ "$FETCHED_RELEASE" == '' ]; then
                  tags="${tags} -t $RELEASE_TAG:$SEM_VERSION"
                  tags="${tags} -t $RELEASE_TAG:$GITHUB_SHA"
                  tags="${tags} -t $RELEASE_TAG:latest"
                  if [ "$INPUT_VERSION" != '' ]; then
                      tags="${tags} -t $RELEASE_TAG:$INPUT_VERSION"
                  fi
                  deploy_version=$SEM_VERSION
              else
                  deploy_version=$INPUT_VERSION
              fi
              
          else
              if [ "$FETCHED_RELEASE" != '' ]; then
                  if [ "$INPUT_VERSION" != '' ]; then
                      deploy_version=$INPUT_VERSION
                  else
                      deploy_version=latest
                  fi                  
              else
                  if [ "$INPUT_VERSION" != '' ]; then
                      tags="${tags} -t $RELEASE_TAG:$INPUT_VERSION"
                      tags="${tags} -t $RELEASE_TAG:$GITHUB_SHA"
                      deploy_version=$INPUT_VERSION
                  else
                      deploy_version=latest
                  fi
              fi
          fi
          echo "tags=$tags"
          echo "deploy_version=$deploy_version"
          echo "DOCKER_TAGS=$tags" >> $GITHUB_ENV
          echo "DEPLOY_VERSION=$deploy_version" >> $GITHUB_ENV

      - uses: docker-practice/actions-setup-docker@master
        timeout-minutes: 12

      - name: Build and Push docker
        if: env.DOCKER_TAGS != ''
        env:
          BUILD_FILE: build.yml
          REGISTRY: ${{ secrets.DOCKER_REGISTRTY }}
          USER: ${{ secrets.DOCKERHUB_USERNAME}}
          PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          TAGS: ${{ env.DOCKER_TAGS }}
        run: |
          while IFS="=" read -r key value; do content["$key"]=$value; done < <(
            yq '.fileImageMap | to_entries | map([.key, .value] | join("=")) | .[]' ${BUILD_FILE}
          )

          docker_registry='' 
          if [ "$REGISTRY" != 'EMPTY' ]; then
              docker_registry=$REGISTRY
          fi

          echo ${PASSWORD} | docker login --username ${USER} --password-stdin ${docker_registry}

          for key in "${!content[@]}"; do 
            printf "key %s, value %s\n" "$key" "${content[$key]}";
            file_path=$(python docker-workflow-config/get_path.py --path $key)
            file_name=$(python docker-workflow-config/get_file.py --path $key)
            image=${content[$key]}  
            docker build -f ${file_name} ${TAGS} ${file_path}
            docker push ${image} --all-tags 
          done

      - name : Print Deployment tag and version
        run: |
          echo "Use deployment tag/version : ${{ inputs.docker_tag }}/${{ env.DEPLOY_VERSION }}"

      