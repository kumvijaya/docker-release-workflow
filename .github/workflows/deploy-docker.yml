# Create flow chart
# Release version can be empty.
# If empty, 
# Give Betelabs
# send contributor role
# get flow chart

name: Deploy Docker

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: false
        description: Version
      create_release:
        type: boolean
        required: false
        description: Create github release
      release_description:
        type: string
        required: false
        description: Github release description
        default: Release related info       
      docker_tag:
        type: string
        required: true
        description: Docker tag
        default: vkumar2/docker-app

jobs:
  docker-workflow:
    permissions: write-all
    runs-on: ubuntu-latest
    name: Deploy Docker
    continue-on-error: false
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      - name : Get Release
        uses: cardinalby/git-get-release-action@v1
        id: get-release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag: ${{ inputs.version }}
          doNotFailIfNotFound : true

      - id: next_version
        uses: zwaldowski/semver-release-action@v3
        with:
          dry_run: true
          bump: patch
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          echo "Nextversion = ${{ steps.next_version.outputs.version }}"
          echo "inputs.create_release= ${{ inputs.create_release }}"
          echo "inputs.version= ${{ inputs.version }}"
          echo "steps.get-release.outputs.tag_name= ${{ steps.get-release.outputs.tag_name }}"

      - name: Create Release 
        if: ${{ inputs.create_release && steps.get-release.outputs.tag_name == '' }}
        id: create_release
        uses: actions/create-release@v1 # find alternate action as it is deprecated
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:  ${{ steps.next_version.outputs.version }}
          release_name: Release  ${{ steps.next_version.outputs.version }}
          body: |
            Release created by GitHub Action.
            ${{ inputs.release_description }}
          draft: false
          prerelease: false

      - name: Populate tags
        env:
          INPUT_VERSION: ${{ inputs.vestion }}
          CREATE_RELEASE: ${{ inputs.create_release }}
          SEM_VERSION: ${{ steps.next_version.outputs.version }}
          FETCHED_RELEASE: ${{ steps.get-release.outputs.tag_name }}
          RELEASE_TAG: ${{ inputs.docker_tag }}
        run: |
          tags=''
          echo "INPUT_VERSION=$INPUT_VERSION"
          echo "CREATE_RELEASE=$CREATE_RELEASE"
          echo "SEM_VERSION=$SEM_VERSION"
          echo "FETCHED_RELEASE=$FETCHED_RELEASE"
          echo "RELEASE_TAG=$RELEASE_TAG"
          if [ "$CREATE_RELEASE" == 'true' ]; then
              tags="$RELEASE_TAG:$SEM_VERSION,$RELEASE_TAG:$GITHUB_SHA,$RELEASE_TAG:latest"
              if [ "$INPUT_VERSION" != '' ]; then
                  tags="${tags},$RELEASE_TAG:$INPUT_VERSION"
              fi 
          else
              if [ "$FETCHED_RELEASE" == '' ] && [ "$INPUT_VERSION" != '' ]; then
                  tags="$RELEASE_TAG:$GITHUB_SHA,$RELEASE_TAG:$INPUT_VERSION"
              fi
          fi
          echo "tags=$tags"
          echo "DOCKER_TAGS=$tags" >> $GITHUB_ENV

      - name: Test env
        run: echo $DOCKER_TAGS

      - name: Set up Docker Buildx
        if: env.DOCKER_TAGS != ''
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        if:  env.DOCKER_TAGS != ''
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Build and push
        if:  env.DOCKER_TAGS != ''
        uses: docker/build-push-action@v4
        with:
          push: true
          file: ./Dockerfile
          tags: ${{ env.DOCKER_TAGS }}

      # - name : Deploy
      #   run: |
      #     echo "TODO: Use release tag/version : ${{ inputs.release_tag }}/${{ inputs.release_version }}"

      